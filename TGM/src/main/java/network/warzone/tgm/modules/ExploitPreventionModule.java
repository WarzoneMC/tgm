package network.warzone.tgm.modules;

import network.warzone.tgm.match.MatchModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerEvent;
import org.bukkit.event.player.PlayerSwapHandItemsEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Created by Jorge on 04/16/2021
 */
public class ExploitPreventionModule extends MatchModule implements Listener {

    private final Map<PlayerEventCall, Long> eventTimestamps = new HashMap<>();

    /**
     * Cooldown for the item hand swap event.
     * Limit: 33 times per second (1000 / 30)
     */
    @EventHandler(priority = EventPriority.LOWEST)
    public void onHandSwap(PlayerSwapHandItemsEvent event) {
        PlayerEventCall eventCall = new PlayerEventCall(event.getPlayer(), event.getClass());
        if (eventTimestamps.containsKey(eventCall)) {
            long passed = System.currentTimeMillis() - eventTimestamps.get(eventCall);
            if (passed < 30) {
                event.setCancelled(true);
                return;
            }
        }
        eventTimestamps.put(eventCall, System.currentTimeMillis());
    }

    @Override
    public void unload() {
        eventTimestamps.clear();
    }

    private static class PlayerEventCall {

        private final Player player;
        private final Class<? extends PlayerEvent> eventType;

        public PlayerEventCall(Player player, Class<? extends PlayerEvent> eventType) {
            this.player = player;
            this.eventType = eventType;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PlayerEventCall that = (PlayerEventCall) o;
            return Objects.equals(player, that.player) && Objects.equals(eventType, that.eventType);
        }

        @Override
        public int hashCode() {
            return Objects.hash(player, eventType);
        }
    }

}
